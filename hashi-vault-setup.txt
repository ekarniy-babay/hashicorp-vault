# https://www.bogotobogo.com/DevOps/Docker/Docker-Vault-Consul.php
# https://bogotobogo.com/DevOps/Docker/Docker-Vault-Consul-B.php
# https://www.bogotobogo.com/DevOps/Docker/Docker-Vault-Consul-C.php

### Create MacVLAN network:
## https://stackoverflow.com/questions/27937185/assign-static-ip-to-docker-container
docker network create -d macvlan --subnet=192.168.2.0/24 --ip-range=192.168.2.240/28 --gateway=192.168.2.1 -o parent=eth0 docker-net1

# Allow cross host and containers access
# https://stackoverflow.com/questions/49600665/docker-macvlan-network-inside-container-is-not-reaching-to-its-own-host 
docker network create -d macvlan -o parent=eno1 \
  --subnet 192.168.2.0/24 \
  --gateway 192.168.2.1 \
  --ip-range 92.168.2.240/28 \
  --aux-address 'host=192.168.2.241' \
  mynet

sudo ip link add mynet-shim link eth0 type macvlan  mode bridge

sudo ip addr add 192.168.2.241/32 dev mynet-shim
sudo ip link set mynet-shim up

sudo ip route add 192.168.2.240/28 dev mynet-shim



# remove containers using wildcard
docker stop $(docker ps -a --filter name=matter* --filter status=running -aq)
docker rm $(docker ps -a --filter name=matter* -aq)


### Create volumes
docker volume create vault-config
docker volume create vault-policies
docker volume create vault-data
docker volume create vault-logs
docker volume create consul-config
docker volume create consul-data
docker volume create backup-data

## copy files to volume
docker run -d --rm --name dummy -v vault-config:/root ubuntu tail -f /dev/null
#docker exec -it dummy /bin/bash
docker cp ./vault/config/vault-config.json dummy:/root
docker stop dummy

docker run -d --rm --name dummy -v consul-config:/root ubuntu tail -f /dev/null
docker cp ./consul/config/consul-config.json dummy:/root
docker cp ./consul/config/consul-config.json dummy:/root/config.json
docker stop dummy

docker exec -it vault /bin/bash


docker run --rm -it -v my-api-files:/temporary -v $PWD/jsonFileLocation:/big-data alpine cp /big-data/*.json /temporary
docker run --rm -it -v my-api-files:/test alpine ls /test


# Vault commands:
# Environment variables:
export VAULT_ADDR=http://192.168.2.245:8200
export VAULT_TOKEN=

# List secrets
vault secrets list

# enable secrets
vault secrets enable -path=sysadmins.club kv

# add secret:
vault kv put sysadmins.club/testSecret testPass='test123'
vault kv put sysadmins.club/testSecret mainPass='Cthtyflf@20!17'

# get secret
vault kv get sysadmins.club/testSecret 

# Enable the database secrets engine at: database/
vault secrets enable database

# check
vault path-help database
vault path-help database/roles

# list authentication providers:
vault auth list

# enable authentication providers:
vault secrets enable userpass #ssh

# add user
vault write auth/userpass/users/admin password='pass'

#login to vault using username and pass:
vault login -method=userpass username=admin password='pass'
vault login -method=approle user_id=admin secret_id=

# create new token:
vault token create

# add test secret
vault kv put secret/dev/appsecret username=dbUser

### Jenkins ###
#################################################################
#################################################################
Tutorials don’t state this, but you will need to click on “Advanced settings” in the Vault Plugin, and then CHANGE from the default to
K/V Engine version: 1
#################################################################
#################################################################

vault auth enable approle


# Load jenkins policy
vault policy write jenkins jenkins_policy.hcl

# Create approle for Jenkins
vault write auth/approle/role/jenkins policies=jenkins

vault write auth/kv/role/main policies=jenkins

#Read creds:
vault read auth/approle/role/jenkins/role-id
vault write -f auth/approle/role/jenkins/secret-id



